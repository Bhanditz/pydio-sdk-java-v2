/*
 * Pydio Cells Rest API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.DocstoreDeleteDocumentsRequest;
import io.swagger.client.model.DocstoreDeleteDocumentsResponse;
import io.swagger.client.model.DocstoreGetDocumentResponse;
import io.swagger.client.model.DocstorePutDocumentRequest;
import io.swagger.client.model.DocstorePutDocumentResponse;
import io.swagger.client.model.RestDocstoreCollection;
import io.swagger.client.model.RestListDocstoreRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DocStoreServiceApi {
    private ApiClient apiClient;

    public DocStoreServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DocStoreServiceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteDoc
     * @param storeID  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDocCall(String storeID, DocstoreDeleteDocumentsRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/docstore/bulk_delete/{StoreID}"
            .replaceAll("\\{" + "StoreID" + "\\}", apiClient.escapeString(storeID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDocValidateBeforeCall(String storeID, DocstoreDeleteDocumentsRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeID' is set
        if (storeID == null) {
            throw new ApiException("Missing the required parameter 'storeID' when calling deleteDoc(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deleteDoc(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteDocCall(storeID, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete one or more docs inside a given store
     * 
     * @param storeID  (required)
     * @param body  (required)
     * @return DocstoreDeleteDocumentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocstoreDeleteDocumentsResponse deleteDoc(String storeID, DocstoreDeleteDocumentsRequest body) throws ApiException {
        ApiResponse<DocstoreDeleteDocumentsResponse> resp = deleteDocWithHttpInfo(storeID, body);
        return resp.getData();
    }

    /**
     * Delete one or more docs inside a given store
     * 
     * @param storeID  (required)
     * @param body  (required)
     * @return ApiResponse&lt;DocstoreDeleteDocumentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocstoreDeleteDocumentsResponse> deleteDocWithHttpInfo(String storeID, DocstoreDeleteDocumentsRequest body) throws ApiException {
        com.squareup.okhttp.Call call = deleteDocValidateBeforeCall(storeID, body, null, null);
        Type localVarReturnType = new TypeToken<DocstoreDeleteDocumentsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete one or more docs inside a given store (asynchronously)
     * 
     * @param storeID  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDocAsync(String storeID, DocstoreDeleteDocumentsRequest body, final ApiCallback<DocstoreDeleteDocumentsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDocValidateBeforeCall(storeID, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DocstoreDeleteDocumentsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDoc
     * @param storeID  (required)
     * @param documentID  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocCall(String storeID, String documentID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/docstore/{StoreID}/{DocumentID}"
            .replaceAll("\\{" + "StoreID" + "\\}", apiClient.escapeString(storeID.toString()))
            .replaceAll("\\{" + "DocumentID" + "\\}", apiClient.escapeString(documentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocValidateBeforeCall(String storeID, String documentID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeID' is set
        if (storeID == null) {
            throw new ApiException("Missing the required parameter 'storeID' when calling getDoc(Async)");
        }
        
        // verify the required parameter 'documentID' is set
        if (documentID == null) {
            throw new ApiException("Missing the required parameter 'documentID' when calling getDoc(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocCall(storeID, documentID, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Load one document by ID from a given store
     * 
     * @param storeID  (required)
     * @param documentID  (required)
     * @return DocstoreGetDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocstoreGetDocumentResponse getDoc(String storeID, String documentID) throws ApiException {
        ApiResponse<DocstoreGetDocumentResponse> resp = getDocWithHttpInfo(storeID, documentID);
        return resp.getData();
    }

    /**
     * Load one document by ID from a given store
     * 
     * @param storeID  (required)
     * @param documentID  (required)
     * @return ApiResponse&lt;DocstoreGetDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocstoreGetDocumentResponse> getDocWithHttpInfo(String storeID, String documentID) throws ApiException {
        com.squareup.okhttp.Call call = getDocValidateBeforeCall(storeID, documentID, null, null);
        Type localVarReturnType = new TypeToken<DocstoreGetDocumentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Load one document by ID from a given store (asynchronously)
     * 
     * @param storeID  (required)
     * @param documentID  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocAsync(String storeID, String documentID, final ApiCallback<DocstoreGetDocumentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocValidateBeforeCall(storeID, documentID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DocstoreGetDocumentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDocs
     * @param storeID  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDocsCall(String storeID, RestListDocstoreRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/docstore/{StoreID}"
            .replaceAll("\\{" + "StoreID" + "\\}", apiClient.escapeString(storeID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDocsValidateBeforeCall(String storeID, RestListDocstoreRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeID' is set
        if (storeID == null) {
            throw new ApiException("Missing the required parameter 'storeID' when calling listDocs(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling listDocs(Async)");
        }
        

        com.squareup.okhttp.Call call = listDocsCall(storeID, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all docs of a given store
     * 
     * @param storeID  (required)
     * @param body  (required)
     * @return RestDocstoreCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestDocstoreCollection listDocs(String storeID, RestListDocstoreRequest body) throws ApiException {
        ApiResponse<RestDocstoreCollection> resp = listDocsWithHttpInfo(storeID, body);
        return resp.getData();
    }

    /**
     * List all docs of a given store
     * 
     * @param storeID  (required)
     * @param body  (required)
     * @return ApiResponse&lt;RestDocstoreCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestDocstoreCollection> listDocsWithHttpInfo(String storeID, RestListDocstoreRequest body) throws ApiException {
        com.squareup.okhttp.Call call = listDocsValidateBeforeCall(storeID, body, null, null);
        Type localVarReturnType = new TypeToken<RestDocstoreCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all docs of a given store (asynchronously)
     * 
     * @param storeID  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDocsAsync(String storeID, RestListDocstoreRequest body, final ApiCallback<RestDocstoreCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDocsValidateBeforeCall(storeID, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestDocstoreCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putDoc
     * @param storeID  (required)
     * @param documentID  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putDocCall(String storeID, String documentID, DocstorePutDocumentRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/docstore/{StoreID}/{DocumentID}"
            .replaceAll("\\{" + "StoreID" + "\\}", apiClient.escapeString(storeID.toString()))
            .replaceAll("\\{" + "DocumentID" + "\\}", apiClient.escapeString(documentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putDocValidateBeforeCall(String storeID, String documentID, DocstorePutDocumentRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeID' is set
        if (storeID == null) {
            throw new ApiException("Missing the required parameter 'storeID' when calling putDoc(Async)");
        }
        
        // verify the required parameter 'documentID' is set
        if (documentID == null) {
            throw new ApiException("Missing the required parameter 'documentID' when calling putDoc(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putDoc(Async)");
        }
        

        com.squareup.okhttp.Call call = putDocCall(storeID, documentID, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Put a document inside a given store
     * 
     * @param storeID  (required)
     * @param documentID  (required)
     * @param body  (required)
     * @return DocstorePutDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocstorePutDocumentResponse putDoc(String storeID, String documentID, DocstorePutDocumentRequest body) throws ApiException {
        ApiResponse<DocstorePutDocumentResponse> resp = putDocWithHttpInfo(storeID, documentID, body);
        return resp.getData();
    }

    /**
     * Put a document inside a given store
     * 
     * @param storeID  (required)
     * @param documentID  (required)
     * @param body  (required)
     * @return ApiResponse&lt;DocstorePutDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocstorePutDocumentResponse> putDocWithHttpInfo(String storeID, String documentID, DocstorePutDocumentRequest body) throws ApiException {
        com.squareup.okhttp.Call call = putDocValidateBeforeCall(storeID, documentID, body, null, null);
        Type localVarReturnType = new TypeToken<DocstorePutDocumentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Put a document inside a given store (asynchronously)
     * 
     * @param storeID  (required)
     * @param documentID  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putDocAsync(String storeID, String documentID, DocstorePutDocumentRequest body, final ApiCallback<DocstorePutDocumentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putDocValidateBeforeCall(storeID, documentID, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DocstorePutDocumentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
